{"version":3,"file":"component---src-pages-404-js-2b384a0c910f9e8ab47a.js","mappings":"qJAIA,MAAMA,EAASA,IAEXC,EAAAA,cAAA,UAAQC,GAAG,cACTD,EAAAA,cAAA,OAAKE,UAAU,aACbF,EAAAA,cAAA,KAAGG,KAAK,KACNH,EAAAA,cAAA,OAAKC,GAAG,cAAcG,IAAI,0CACxBC,MAAO,IACPC,OAAQ,GACRC,IAAI,iBAoBhB,IAZeC,IAAoC,IAAnC,SAAEC,EAAQ,MAAEC,EAAK,SAAEC,GAAUH,EAC3C,MACMI,EADW,MACEH,EAASI,SAE5B,OACEb,EAAAA,cAAA,OAAKE,UAAU,iBAAiB,oBAAmBU,IAC/CA,GAAcZ,EAAAA,cAACD,EAAM,MACvBC,EAAAA,cAAA,QAAME,UAAU,aAAaS,GACzB,C,+CC2BV,IA7CYH,IAAuC,IAADM,EAAAC,EAAAC,EAAA,IAArC,YAAEC,EAAW,MAAEP,EAAK,SAAEC,GAAUH,EAC3C,MAAM,KAAEU,IAASC,EAAAA,EAAAA,gBAAe,cAgB1BC,EAAkBH,GAAeC,EAAKG,aAAaJ,YACnDK,EAAgC,QAApBR,EAAGI,EAAKG,oBAAY,IAAAP,OAAA,EAAjBA,EAAmBJ,MAExC,OACEV,EAAAA,cAAAA,EAAAA,SAAA,KACEA,EAAAA,cAAA,QAAMuB,KAAK,SAASC,QAAQ,SAC5BxB,EAAAA,cAAA,aAAQsB,EAAe,GAAGZ,OAAWY,IAAiBZ,GACtDV,EAAAA,cAAA,QAAMuB,KAAK,cAAcC,QAASJ,IAClCpB,EAAAA,cAAA,QAAMyB,SAAS,WAAWD,QAASd,IACnCV,EAAAA,cAAA,QAAMyB,SAAS,iBAAiBD,QAASJ,IACzCpB,EAAAA,cAAA,QAAMyB,SAAS,UAAUD,QAAQ,YACjCxB,EAAAA,cAAA,QAAMuB,KAAK,eAAeC,QAAQ,YAClCxB,EAAAA,cAAA,QACEuB,KAAK,kBACLC,SAA0B,QAAjBT,EAAAG,EAAKG,oBAAY,IAAAN,GAAQ,QAARC,EAAjBD,EAAmBW,cAAM,IAAAV,OAAR,EAAjBA,EAA2BW,UAAW,KAEjD3B,EAAAA,cAAA,QAAMuB,KAAK,gBAAgBC,QAASd,IACpCV,EAAAA,cAAA,QAAMuB,KAAK,sBAAsBC,QAASJ,IAG1CpB,EAAAA,cAAA,QAAM4B,IAAI,aAAazB,KAAK,iCAC5BH,EAAAA,cAAA,QAAM4B,IAAI,aAAazB,KAAK,4BAA4B0B,aAAW,IACnE7B,EAAAA,cAAA,QAAMG,KAAK,0LAA0LyB,IAAI,eACxMjB,EACA,C,mGC7CP,MAWamB,EAAOA,IAAM9B,EAAAA,cAAC+B,EAAAA,EAAG,CAACrB,MAAM,mBAErC,UAbqBF,IAAwB,IAAvB,KAAEwB,EAAI,SAAEvB,GAAUD,EACtC,MAAMyB,EAAYD,EAAKd,KAAKG,aAAaX,MAEzC,OACEV,EAAAA,cAACkC,EAAAA,EAAM,CAACzB,SAAUA,EAAUC,MAAOuB,GACjCjC,EAAAA,cAAA,UAAI,kBACJA,EAAAA,cAAA,SAAG,2DACI,C","sources":["webpack://gatsby-starter-blog/./src/components/layout.js","webpack://gatsby-starter-blog/./src/components/seo.js","webpack://gatsby-starter-blog/./src/pages/404.js"],"sourcesContent":["import * as React from \"react\"\nimport { StaticImage } from \"gatsby-plugin-image\"\nimport { Link } from \"gatsby\"\n\nconst Header = () => {\n  return (\n    <header id=\"page-hader\">\n      <div className=\"container\">\n        <a href=\"/\">\n          <img id=\"header-logo\" src=\"/img/logo-horizontal-inverse-filled.svg\"\n            width={373}\n            height={38}\n            alt=\"AlmotÃ¡sim\"\n          />\n        </a>\n      </div>\n    </header>\n  )\n}\n\nconst Layout = ({ location, title, children }) => {\n  const rootPath = `${__PATH_PREFIX__}/`\n  const isRootPath = location.pathname === rootPath\n\n  return (\n    <div className=\"global-wrapper\" data-is-root-path={isRootPath}>\n      {!isRootPath && <Header />}\n      <main className=\"container\">{children}</main>\n    </div>\n  )\n}\n\nexport default Layout\n","/**\n * SEO component that queries for data with\n * Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.com/docs/how-to/querying-data/use-static-query/\n */\n\nimport * as React from \"react\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nconst Seo = ({ description, title, children }) => {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            social {\n              twitter\n            }\n          }\n        }\n      }\n    `\n  )\n\n  const metaDescription = description || site.siteMetadata.description\n  const defaultTitle = site.siteMetadata?.title\n\n  return (\n    <>\n      <meta name=\"robots\" content=\"none\"></meta>\n      <title>{defaultTitle ? `${title} | ${defaultTitle}` : title}</title>\n      <meta name=\"description\" content={metaDescription} />\n      <meta property=\"og:title\" content={title} />\n      <meta property=\"og:description\" content={metaDescription} />\n      <meta property=\"og:type\" content=\"website\" />\n      <meta name=\"twitter:card\" content=\"summary\" />\n      <meta\n        name=\"twitter:creator\"\n        content={site.siteMetadata?.social?.twitter || ``}\n      />\n      <meta name=\"twitter:title\" content={title} />\n      <meta name=\"twitter:description\" content={metaDescription} />\n\n\n      <link rel=\"preconnect\" href=\"https://fonts.googleapis.com\" />\n      <link rel=\"preconnect\" href=\"https://fonts.gstatic.com\" crossorigin />\n      <link href=\"https://fonts.googleapis.com/css2?family=Alegreya+SC:ital,wght@0,400;0,500;0,700;0,800;0,900;1,400;1,500;1,700;1,800;1,900&family=Alegreya:ital,wght@0,400..900;1,400..900&display=swap\" rel=\"stylesheet\" />\n      {children}\n    </>\n  )\n}\n\nexport default Seo\n","import * as React from \"react\"\nimport { graphql } from \"gatsby\"\n\nimport Layout from \"../components/layout\"\nimport Seo from \"../components/seo\"\n\nconst NotFoundPage = ({ data, location }) => {\n  const siteTitle = data.site.siteMetadata.title\n\n  return (\n    <Layout location={location} title={siteTitle}>\n      <h1>404: Not Found</h1>\n      <p>You just hit a route that doesn&#39;t exist... the sadness.</p>\n    </Layout>\n  )\n}\n\nexport const Head = () => <Seo title=\"404: Not Found\" />\n\nexport default NotFoundPage\n\nexport const pageQuery = graphql`\n  query {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n  }\n`\n"],"names":["Header","React","id","className","href","src","width","height","alt","_ref","location","title","children","isRootPath","pathname","_site$siteMetadata","_site$siteMetadata2","_site$siteMetadata2$s","description","site","useStaticQuery","metaDescription","siteMetadata","defaultTitle","name","content","property","social","twitter","rel","crossorigin","Head","Seo","data","siteTitle","Layout"],"sourceRoot":""}