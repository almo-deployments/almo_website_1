{"version":3,"file":"component---src-templates-blog-post-js-981be210bf3a442078ab.js","mappings":"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","sources":["webpack://gatsby-starter-blog/./src/components/layout.js","webpack://gatsby-starter-blog/./src/components/seo.js","webpack://gatsby-starter-blog/./src/components/tagsList.js","webpack://gatsby-starter-blog/./src/templates/blog-post.js"],"sourcesContent":["import * as React from \"react\"\nimport { StaticImage } from \"gatsby-plugin-image\"\nimport { Link } from \"gatsby\"\n\nconst Header = () => {\n  return (\n    <header id=\"page-hader\">\n      <div className=\"container\">\n        <Link to=\"/\">\n          <img id=\"header-logo\" src={`${__PATH_PREFIX__}/img/logo-horizontal-inverse-filled.svg`}\n            width={373}\n            height={38}\n            alt=\"AlmotÃ¡sim\"\n          />\n        </Link>\n      </div>\n    </header>\n  )\n}\n\nconst Layout = ({ location, title, children }) => {\n  const rootPath = `${__PATH_PREFIX__}/`\n  const isRootPath = location.pathname === rootPath\n\n  return (\n    <div className=\"global-wrapper\" data-is-root-path={isRootPath}>\n      {!isRootPath && <Header location={location}/>}\n      <main className=\"container\">{children}</main>\n    </div>\n  )\n}\n\nexport default Layout\n","/**\n * SEO component that queries for data with\n * Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.com/docs/how-to/querying-data/use-static-query/\n */\n\nimport * as React from \"react\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nconst Seo = ({ description, title, children }) => {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            social {\n              twitter\n            }\n          }\n        }\n      }\n    `\n  )\n\n  const metaDescription = description || site.siteMetadata.description\n  const defaultTitle = site.siteMetadata?.title\n\n  return (\n    <>\n      <meta name=\"robots\" content=\"none\"></meta>\n      <title>{defaultTitle ? `${title} | ${defaultTitle}` : title}</title>\n      <meta name=\"description\" content={metaDescription} />\n      <meta property=\"og:title\" content={title} />\n      <meta property=\"og:description\" content={metaDescription} />\n      <meta property=\"og:type\" content=\"website\" />\n      <meta name=\"twitter:card\" content=\"summary\" />\n      <meta\n        name=\"twitter:creator\"\n        content={site.siteMetadata?.social?.twitter || ``}\n      />\n      <meta name=\"twitter:title\" content={title} />\n      <meta name=\"twitter:description\" content={metaDescription} />\n\n\n      <link rel=\"preconnect\" href=\"https://fonts.googleapis.com\" />\n      <link rel=\"preconnect\" href=\"https://fonts.gstatic.com\" crossorigin />\n      <link href=\"https://fonts.googleapis.com/css2?family=Alegreya+SC:ital,wght@0,400;0,500;0,700;0,800;0,900;1,400;1,500;1,700;1,800;1,900&family=Alegreya:ital,wght@0,400..900;1,400..900&display=swap\" rel=\"stylesheet\" />\n      {children}\n    </>\n  )\n}\n\nexport default Seo\n","import * as React from \"react\"\n\nconst TagsList = ({ tags, barBefore = false }) => {\n  const hasTags = tags && tags.length > 0;\n  if (!hasTags) return;\n  return (\n    <>\n      {barBefore && '|'}\n      {(tags ?? []).map(tag => <span className=\"tag\" key={tag}>#{tag.toUpperCase()}</span>)}\n    </>\n  )\n}\n\nexport default TagsList;\n","import * as React from \"react\"\nimport { Link, graphql } from \"gatsby\"\n\nimport Layout from \"../components/layout\"\nimport Seo from \"../components/seo\"\nimport TagsList from \"../components/tagsList\"\n\nconst BlogPostTemplate = ({\n  data: { previous, next, site, markdownRemark: post },\n  location,\n}) => {\n  const siteTitle = site.siteMetadata?.title || `Title`\n\n  return (\n    <Layout location={location} title={siteTitle}>\n      <article\n        className=\"blog-post\"\n        itemScope\n        itemType=\"http://schema.org/Article\"\n      >\n        <header>\n          <h1 itemProp=\"headline\">{post.frontmatter.title}</h1>\n          <p>{post.frontmatter.date} <TagsList tags={post.frontmatter.tags} barBefore /></p>\n        </header>\n        <section id=\"extranotes\">\n          {!!post.frontmatter.description && <p>{post.frontmatter.description}</p>}\n          {!!post.frontmatter.leadText && <p>{post.frontmatter.leadText}</p>}\n          {!!post.frontmatter.notesText && <p>{post.frontmatter.notesText}</p>}\n          {!!post.frontmatter.authorName && <p>by {post.frontmatter.authorName}</p>}\n        </section>\n        <section\n          dangerouslySetInnerHTML={{ __html: post.html }}\n          itemProp=\"articleBody\"\n        />\n        <hr />\n        <footer>\n          <Link to=\"/\"><img src=\"/img/logo-inverse.svg\" width=\"100\" /></Link>\n        </footer>\n      </article>\n    </Layout>\n  )\n}\n\nexport const Head = ({ data: { markdownRemark: post } }) => {\n  return (\n    <Seo\n      title={post.frontmatter.title}\n      description={post.frontmatter.description || post.excerpt}\n    />\n  )\n}\n\nexport default BlogPostTemplate\n\nexport const pageQuery = graphql`\n  query BlogPostBySlug(\n    $id: String!\n    $previousPostId: String\n    $nextPostId: String\n  ) {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    markdownRemark(id: { eq: $id }) {\n      id\n      excerpt(pruneLength: 160)\n      html\n      frontmatter {\n        title\n        date(formatString: \"MMMM DD, YYYY\")\n        description\n        tags\n        authorName\n        leadText\n        notesText\n      }\n    }\n    previous: markdownRemark(id: { eq: $previousPostId }) {\n      fields {\n        slug\n      }\n      frontmatter {\n        title\n      }\n    }\n    next: markdownRemark(id: { eq: $nextPostId }) {\n      fields {\n        slug\n      }\n      frontmatter {\n        title\n      }\n    }\n  }\n`\n"],"names":["Header","React","id","className","Link","to","src","width","height","alt","_ref","location","title","children","isRootPath","pathname","_site$siteMetadata","_site$siteMetadata2","_site$siteMetadata2$s","description","site","useStaticQuery","metaDescription","siteMetadata","defaultTitle","name","content","property","social","twitter","rel","href","crossorigin","tags","barBefore","length","map","tag","key","toUpperCase","Head","_ref2","data","markdownRemark","post","Seo","frontmatter","excerpt","previous","next","siteTitle","Layout","itemScope","itemType","itemProp","date","TagsList","leadText","notesText","authorName","dangerouslySetInnerHTML","__html","html"],"sourceRoot":""}