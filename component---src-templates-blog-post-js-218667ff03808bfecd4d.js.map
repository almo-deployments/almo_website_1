{"version":3,"file":"component---src-templates-blog-post-js-218667ff03808bfecd4d.js","mappings":"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","sources":["webpack://gatsby-starter-blog/./src/components/getOppositeLanguageUrl.js","webpack://gatsby-starter-blog/./src/components/PageHeader.js","webpack://gatsby-starter-blog/./src/components/layout.js","webpack://gatsby-starter-blog/./src/components/seo.js","webpack://gatsby-starter-blog/./src/components/tagsList.js","webpack://gatsby-starter-blog/./src/templates/blog-post.js"],"sourcesContent":["export function getOppositeLanguageUrl(path, currentLanguage) {\n  const newLanguage = currentLanguage === 'en' ? 'es' : 'en';\n  return path.replace(`/${currentLanguage}/`, `/${newLanguage}/`);\n}","import * as React from \"react\"\nimport { StaticImage } from \"gatsby-plugin-image\"\nimport { Link } from \"gatsby\"\nimport { getOppositeLanguageUrl } from \"./getOppositeLanguageUrl\";\n\nconst PageHeader = ({ language, location }) => {\n  const [isMenuOpen, setIsMenuOpen] = React.useState(false);\n  return (\n    <header id=\"page-hader\">\n      <div className=\"container\">\n        <Link to={language === 'en' ? '/' : `/${language}/`}>\n          <img id=\"header-logo\" src={`${__PATH_PREFIX__}/img/logo-horizontal-inverse-filled.svg`}\n            width={373}\n            height={38}\n            alt=\"Almotásim\"\n          />\n        </Link>\n        <button id=\"burger-menu\" onClick={() => setIsMenuOpen(value => !value)}><img id=\"burger-button\" src={`${__PATH_PREFIX__}/img/burger-menu-white.svg`} /></button>\n        <nav id=\"site-navigation\" className={isMenuOpen ? 'menu-open' : undefined}>\n          <div className=\"container\">\n            {language === 'en' ?\n              <ul>\n                <li><Link to={`${__PATH_PREFIX__}/${language}/projects/`}>Projects</Link></li>\n                <li><Link to={`${__PATH_PREFIX__}/${language}/sketches/`}>Sketches</Link></li>\n                <li><Link to={`${__PATH_PREFIX__}/${language}/texts/`}>Texts</Link></li>\n                <li><Link to={`${__PATH_PREFIX__}/${language}/about/`}>About</Link></li>\n                <li><Link to={getOppositeLanguageUrl(location.pathname, language)}>Español</Link></li>\n              </ul> : <ul>\n                <li><Link to={`${__PATH_PREFIX__}/${language}/projects/`}>Proyectos</Link></li>\n                <li><Link to={`${__PATH_PREFIX__}/${language}/sketches/`}>Bosquejos</Link></li>\n                <li><Link to={`${__PATH_PREFIX__}/${language}/texts/`}>Textos</Link></li>\n                <li><Link to={`${__PATH_PREFIX__}/${language}/about/`}>Info</Link></li>\n                <li><Link to={getOppositeLanguageUrl(location.pathname, language)}>English</Link></li>\n              </ul>}\n          </div>\n        </nav>\n      </div>\n    </header>\n  )\n}\n\nexport default PageHeader;","import * as React from \"react\"\nimport PageHeader from \"./PageHeader\"\n// import { StaticImage } from \"gatsby-plugin-image\"\n// import { Link } from \"gatsby\"\n\n\nconst Layout = ({ location, title, children, language }) => {\n  const rootPath = `${__PATH_PREFIX__}/`\n  const isRootPath = location.pathname === rootPath\n\n  return (\n    <div className=\"global-wrapper\" data-is-root-path={isRootPath}>\n      {!isRootPath && <PageHeader location={location} language={language} />}\n      <main className=\"container\">{children}</main>\n    </div>\n  )\n}\n\nexport default Layout\n","/**\n * SEO component that queries for data with\n * Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.com/docs/how-to/querying-data/use-static-query/\n */\n\nimport * as React from \"react\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nconst Seo = ({ description, title, children }) => {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            social {\n              twitter\n            }\n          }\n        }\n      }\n    `\n  )\n\n  const metaDescription = description || site.siteMetadata.description\n  const defaultTitle = site.siteMetadata?.title\n\n  return (\n    <>\n      <meta name=\"robots\" content=\"none\"></meta>\n      <title>{defaultTitle ? `${title} | ${defaultTitle}` : title}</title>\n      <meta name=\"description\" content={metaDescription} />\n      <meta property=\"og:title\" content={title} />\n      <meta property=\"og:description\" content={metaDescription} />\n      <meta property=\"og:type\" content=\"website\" />\n      <meta name=\"twitter:card\" content=\"summary\" />\n      <meta\n        name=\"twitter:creator\"\n        content={site.siteMetadata?.social?.twitter || ``}\n      />\n      <meta name=\"twitter:title\" content={title} />\n      <meta name=\"twitter:description\" content={metaDescription} />\n\n\n      <link rel=\"preconnect\" href=\"https://fonts.googleapis.com\" />\n      <link rel=\"preconnect\" href=\"https://fonts.gstatic.com\" crossOrigin=\"anonymous\" />\n      <link href=\"https://fonts.googleapis.com/css2?family=Alegreya+SC:ital,wght@0,400;0,500;0,700;0,800;0,900;1,400;1,500;1,700;1,800;1,900&family=Alegreya:ital,wght@0,400..900;1,400..900&display=swap\" rel=\"stylesheet\" />\n      {children}\n    </>\n  )\n}\n\nexport default Seo\n","import * as React from \"react\"\n\nconst TagsList = ({ tags, barBefore = false }) => {\n  const hasTags = tags && tags.length > 0;\n  if (!hasTags) return;\n  return (\n    <>\n      {barBefore && '|'}\n      {(tags ?? []).map(tag => <span className=\"tag\" key={tag}>#{tag.toUpperCase()}</span>)}\n    </>\n  )\n}\n\nexport default TagsList;\n","import * as React from \"react\"\nimport { Link, graphql } from \"gatsby\"\n\nimport Layout from \"../components/layout\"\nimport Seo from \"../components/seo\"\nimport TagsList from \"../components/tagsList\"\n\nconst BlogPostTemplate = ({\n  data: { previous, next, site, markdownRemark: post },\n  location,\n}) => {\n  const siteTitle = site.siteMetadata?.title || `Title`\n\n  return (\n    <Layout location={location} title={siteTitle} language={post.fields.language}>\n      <article\n        className=\"blog-post\"\n        itemScope\n        itemType=\"http://schema.org/Article\"\n      >\n        <header>\n          <div className=\"back-to-list\"><Link to={`/${post.fields.language}/${post.fields.contentType}/`}>[{post.fields.contentType}]</Link></div>\n          <h1 itemProp=\"headline\">{post.frontmatter.title}</h1>\n          <p>{post.frontmatter.date} <TagsList tags={post.frontmatter.tags} barBefore /></p>\n        </header>\n        <section id=\"extranotes\">\n          {!!post.frontmatter.description && <p>{post.frontmatter.description}</p>}\n          {!!post.frontmatter.leadText && <p>{post.frontmatter.leadText}</p>}\n          {!!post.frontmatter.notesText && <p>{post.frontmatter.notesText}</p>}\n          {!!post.frontmatter.authorName && <p>by {post.frontmatter.authorName}</p>}\n        </section>\n        <section\n          dangerouslySetInnerHTML={{ __html: post.html }}\n          itemProp=\"articleBody\"\n        />\n        <hr />\n        <footer>\n          <Link to=\"/\"><img src={`${__PATH_PREFIX__}/img/logo-inverse.svg`} width=\"100\" /></Link>\n        </footer>\n      </article>\n    </Layout>\n  )\n}\n\nexport const Head = ({ data: { markdownRemark: post } }) => {\n  return (\n    <Seo\n      title={post.frontmatter.title}\n      description={post.frontmatter.description || post.excerpt}\n    />\n  )\n}\n\nexport default BlogPostTemplate\n\nexport const pageQuery = graphql`\n  query BlogPostBySlug(\n    $id: String!\n    $previousPostId: String\n    $nextPostId: String\n  ) {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    markdownRemark(id: { eq: $id }) {\n      id\n      excerpt(pruneLength: 160)\n      html\n      fields {\n        language\n        contentType\n      }\n      frontmatter {\n        title\n        date(formatString: \"MMMM DD, YYYY\")\n        description\n        tags\n        authorName\n        leadText\n        notesText\n      }\n    }\n    previous: markdownRemark(id: { eq: $previousPostId }) {\n      fields {\n        slug\n      }\n      frontmatter {\n        title\n      }\n    }\n    next: markdownRemark(id: { eq: $nextPostId }) {\n      fields {\n        slug\n      }\n      frontmatter {\n        title\n      }\n    }\n  }\n`\n"],"names":["getOppositeLanguageUrl","path","currentLanguage","newLanguage","replace","_ref","language","location","isMenuOpen","setIsMenuOpen","React","id","className","Link","to","src","width","height","alt","onClick","value","undefined","pathname","title","children","isRootPath","PageHeader","_site$siteMetadata","_site$siteMetadata2","_site$siteMetadata2$s","description","site","useStaticQuery","metaDescription","siteMetadata","defaultTitle","name","content","property","social","twitter","rel","href","crossOrigin","tags","barBefore","length","map","tag","key","toUpperCase","Head","_ref2","data","markdownRemark","post","Seo","frontmatter","excerpt","previous","next","siteTitle","Layout","fields","itemScope","itemType","contentType","itemProp","date","TagsList","leadText","notesText","authorName","dangerouslySetInnerHTML","__html","html"],"sourceRoot":""}